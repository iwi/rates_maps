install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+100
z*2+1000
my_div
install.packages("shiny")
library(shiny)
library(shiny)
runExample("01_hello")
library(shiny)
runExample("01_hello")
install.packages("ggvis")
require(ggvis)
p<-ggvis(mtcars,x=~wt,y=~mpg)
p<-ggvis(mtcars,x=~wt,y=~mpg)
layer_points(p)
mtcars %>%
ggvis(x=~wt,y=~mpg) %>%
layer_points()
require(dplyr)
mtcars %>%
ggvis(x=~mpg,y=~disp) %>%
mutate(disp=disp/61.0237) #convert engine disp to l
layer_points()
mtcars %>%
ggvis(~mpg,~disp,stroke=~vs) %>%
layer_points()
mtcars %>%
ggvis(~mpg,~disp,fill=~vs) %>%
layer_points()
head(mtcars)
str(mtcars)
mtcars %>%
ggvis(~mpg,~disp,size=~vs) %>%
layer_points()
mtcars %>%
ggvis(~mpg,~disp,shape=~factor(cyl)) %>%
layer_points()
mtcars %>%
ggvis(~wt,~mpg,fill:="red",stroke:="black",size=factor(cyl))%>%
layer_points()
ggvis(~wt,~mpg,fill:="red",stroke:="black",size=~factor(cyl))%>%
layer_points()
mtcars %>%
ggvis(~wt,~mpg,fill:="red",stroke:="black")%>%
layer_points()
mtcars %>%
ggvis(~wt,~mpg,fill:="red",
stroke:="black",
size=~factor(cyl))%>%
layer_points()
mtcars %>%
ggvis(~wt,~mpg,fill:="red",
stroke:="black",
size=~vs)%>%
layer_points()
mtcars %>%
ggvis(~wt,~mpg,size:=300,
opacity:=0.4) %>%
layer_points()
mtcars %>%
ggvis(~wt,~mpg,shape:="cross") %>%
layer_points()
mtcars %>%
ggvis(~wt,~mpg,
size:=input_slider(10,100),
opacity:=input_slider(0,1)) %>%
layer_points()
mtcars %>%
ggvis(~wt) %>%
layer_histograms(width=input_slider(0,2,step=0.10,label="width"),
center=input_slider(0,2,step=0.05,label="center"))
key_s<-left_right(10,100,step=50)
mtcars %>%
key_s<-left_right(10,1000,step=50)
mtcars %>%
ggvis(~wt,~mpg,
size:=key_s,
opacity:=0.5) %>%
layer_points()
key_s<-left_right(10,1000,step=50)
mtcars %>%
ggvis(~wt,~mpg,
size:=key_s,
opacity:=0.5) %>%
layer_points()
mtcars %>%
ggvis(~wt) %>%
layer_histograms(width=input_slider(0,2,step=0.10,label="width"),
center=input_slider(0,2,step=0.05,label="center"))
mtcars %>%
ggvis(~wt,~mpg) %>%
layer_points () %>%
add_tooltip(function(df) df$wt)
work_path <- "H:/RCT/rct_participants.csv"
moj_gors_list<-read.csv(work_path,header=TRUE)
participants <- subset(moj_gors_list,rct_opt_in==TRUE,select=c(name,unit,team,email))
if (nrow(participants) %% 2 != 0){
no_match_line <- data.frame(name="No match",unit=NA,team=NA,email=NA)
participants <- rbind(participants,no_match_line)
}
participants_names <- participants$name
sample_size <- nrow(participants)/2
row_names <- sample(participants_names,sample_size,replace=FALSE,prob=NULL)
column_names <- participants_names[!(participants$name %in% row_names)]
matrix <- matrix(sample.int(sample_size^2,size = sample_size^2,replace = FALSE),
nrow = sample_size,
ncol = sample_size)
colnames(matrix) <-  column_names
rownames(matrix) <- row_names
for(row_num in 1:sample_size){
selected_row <- matrix[row_num,]
selected_name_row <- rownames(matrix)[[row_num]]
selected_name_row_details <- subset(participants,name==selected_name_row)
selected_name_row_team <- selected_name_row_details$team
for(column_num in 1:sample_size){
selected_name_column <- colnames(matrix)[[column_num]]
selected_name_column_details <- subset(participants,name==selected_name_column)
selected_name_column_team <- selected_name_column_details$team
if(selected_name_row_team == selected_name_column_team){
matrix[row_num,column_num] <- 9999
}
}
}
write.csv(matrix,"H:/RCT/TEST20150501.csv")
work_path <- "H:/RCT/rct_participants.csv"
moj_gors_list<-read.csv(work_path,header=TRUE)
work_path <- "C:/Users/Annie/Documents/R code/GORS RCT/full_moj_gors_list.csv"
moj_gors_list<-read.csv(work_path,header=TRUE)
participants <- subset(moj_gors_list,rct_opt_in==TRUE,select=c(name,unit,team,email))
if (nrow(participants) %% 2 != 0){
no_match_line <- data.frame(name="No match",unit=NA,team=NA,email=NA)
participants <- rbind(participants,no_match_line)
}
participants_names <- participants$name
sample_size <- nrow(participants)/2
row_names <- sample(participants_names,sample_size,replace=FALSE,prob=NULL)
column_names <- participants_names[!(participants$name %in% row_names)]
matrix <- matrix(sample.int(sample_size^2,size = sample_size^2,replace = FALSE),
nrow = sample_size,
ncol = sample_size)
require(clue)
solve_LSAP(matrix,maximum=FALSE)
a<-solve_LSAP(matrix,maximum=FALSE)
str(a)
a
a[1]
View(matrix)
View(matrix)
require(clue)
work_path <- "C:/Users/Annie/Documents/R code/GORS RCT/full_moj_gors_list.csv"
moj_gors_list<-read.csv(work_path,header=TRUE)
participants <- subset(moj_gors_list,rct_opt_in==TRUE,select=c(name,unit,team,email))
if (nrow(participants) %% 2 != 0){
no_match_line <- data.frame(name="No match",unit=NA,team=NA,email=NA)
participants <- rbind(participants,no_match_line)
}
participants_names <- participants$name
sample_size <- nrow(participants)/2
row_names <- sample(participants_names,sample_size,replace=FALSE,prob=NULL)
column_names <- participants_names[!(participants$name %in% row_names)]
matrix <- matrix(sample.int(sample_size^2,size = sample_size^2,replace = FALSE),
nrow = sample_size,
ncol = sample_size)
colnames(matrix) <-  column_names
rownames(matrix) <- row_names
for(row_num in 1:sample_size){
selected_row <- matrix[row_num,]
selected_name_row <- rownames(matrix)[[row_num]]
selected_name_row_details <- subset(participants,name==selected_name_row)
selected_name_row_team <- selected_name_row_details$team
for(column_num in 1:sample_size){
selected_name_column <- colnames(matrix)[[column_num]]
selected_name_column_details <- subset(participants,name==selected_name_column)
selected_name_column_team <- selected_name_column_details$team
if(selected_name_row_team == selected_name_column_team){
matrix[row_num,column_num] <- 9999
}
}
}
a<-solve_LSAP(matrix,maximum=FALSE)
write.csv(matrix,"H:/RCT/TEST20150501.csv")
View(matrix)
participants
str(participants)
str(participants)
if (nrow(participants) %% 2 != 0){
no_match_line <- data.frame(name="No match",unit=NA,team=NA,email=NA)
participants <- rbind(participants,no_match_line)
}
str(participants)
participants[1,]
participants[40,]
participants[70,]
participants[60,]
participants[65,]
participants[63,]
participants[64,]
str(participants)
require(clue)
require(plyr)
work_path <- "C:/Users/Annie/Documents/R code/GORS RCT/full_moj_gors_list.csv"
moj_gors_list<-read.csv(work_path,header=TRUE)
participants <- subset(moj_gors_list,rct_opt_in==TRUE,select=c(name,unit,team,email))
if (nrow(participants) %% 2 != 0){
no_match_line <- data.frame(name="No match",unit=NA,team=NA,email=NA)
participants <- rbind(participants,no_match_line)
}
participants_names <- participants$name
sample_size <- nrow(participants)/2
row_names <- sample(participants_names,sample_size,replace=FALSE,prob=NULL)
column_names <- participants_names[!(participants$name %in% row_names)]
matrix <- matrix(sample.int(sample_size^2,size = sample_size^2,replace = FALSE),
nrow = sample_size,
ncol = sample_size)
colnames(matrix) <- column_names
rownames(matrix) <- row_names
for(row_num in 1:sample_size){
selected_name_row <- rownames(matrix)[[row_num]]
selected_name_row_details <- subset(participants,name==selected_name_row)
selected_name_row_team <- selected_name_row_details$team
for(column_num in 1:sample_size){
selected_name_column <- colnames(matrix)[[column_num]]
selected_name_column_details <- subset(participants,name==selected_name_column)
selected_name_column_team <- selected_name_column_details$team
if(selected_name_row_team == selected_name_column_team){
matrix[row_num,column_num] <- 9999
}
}
}
a<-solve_LSAP(matrix,maximum=FALSE)
str(a)
person1_names <- data.frame(name=rownames(matrix))
person1_details <- join(person1_names,participants,type="inner")
person2_names<-data.frame(name=NA)
for(paired in 1:sample_size){
person2_names<- rbind(person2_names,colnames(matrix)[[a[paired]]])
}
person2_details <- join(person2_names,participants,type="inner")
cbind(person1_details,person2_details)
matched_pairs <- cbind(person1_details,person2_details)
write.csv(matched_pairs,write_path)
write_path <- "C:/Users/Annie/Documents/R code/GORS RCT/matched.csv"
write.csv(matched_pairs,write_path)
write.csv(matched_pairs,write_path,row.names=FALSE)
a
#this code uses an adjustment to the hungarian algorithm to assign a person from one list
#to one person from another list. The 'values' are randomly assigned, but people who
#are in the same team are assigned an arbitrarily large number to ensure that they
#are not paired
###set write path and read path
#set read path for the full list of moj gors members
read_path <- "C:/Users/Annie/Documents/R code/GORS RCT/full_moj_gors_list.csv"
#set write path
write_path <- "C:/Users/Annie/Documents/R code/GORS RCT/matched.csv"
#########
#load clue package as is has an inbuilt hungarian algortihm solver
require(clue)
#load plyr package because the join functions are used
require(plyr)
moj_gors_list<-read.csv(read_path,header=TRUE)
participants <- subset(moj_gors_list,rct_opt_in==TRUE,select=c(name,unit,team,email))
#add a 'no match' line if there are an odd number of people in the list
if (nrow(participants) %% 2 != 0){
no_match_line <- data.frame(name="No match",unit=NA,team=NA,email=NA)
participants <- rbind(participants,no_match_line)
}
participants_names <- participants$name
###split the list of names in half (randomly) and assign one list to the rows and one to the columns
sample_size <- nrow(participants)/2
row_names <- sample(participants_names,sample_size,replace=FALSE,prob=NULL)
column_names <- participants_names[!(participants$name %in% row_names)]
#create a matrix of random values
matrix <- matrix(sample.int(sample_size^2,size = sample_size^2,replace = FALSE),
nrow = sample_size,
ncol = sample_size)
###set matrix row names and column names
colnames(matrix) <- column_names
rownames(matrix) <- row_names
###assign an arbitrarily large number to those that are in the same team
for(row_num in 1:sample_size){
selected_name_row <- rownames(matrix)[[row_num]]
selected_name_row_details <- subset(participants,name==selected_name_row)
selected_name_row_team <- selected_name_row_details$team
for(column_num in 1:sample_size){
selected_name_column <- colnames(matrix)[[column_num]]
selected_name_column_details <- subset(participants,name==selected_name_column)
selected_name_column_team <- selected_name_column_details$team
if(selected_name_row_team == selected_name_column_team){
matrix[row_num,column_num] <- 9999
}
}
}
###run the hungarian algorithm solver
opt_assignment <- solve_LSAP(matrix,maximum=FALSE)
#subset the details of people in the rows
person1_names <- data.frame(name=rownames(matrix))
person1_details <- join(person1_names,participants,type="inner")
#subset the details of the persons each row is matched to
person2_names<-data.frame(name=NA)
for(paired in 1:sample_size){
person2_names<- rbind(person2_names,colnames(matrix)[[opt_assignment[paired]]])
}
person2_details <- join(person2_names,participants,type="inner")
matched_pairs <- cbind(person1_details,person2_details)
write.csv(matched_pairs,write_path,row.names=FALSE)
?join
#this code uses an adjustment to the hungarian algorithm to assign a person from one list
#to one person from another list. The 'values' are randomly assigned, but people who
#are in the same team are assigned an arbitrarily large number to ensure that they
#are not paired
###set write path and read path
#set read path for the full list of moj gors members
read_path <- "C:/Users/Annie/Documents/R code/GORS RCT/full_moj_gors_list.csv"
#set write path
write_path <- "C:/Users/Annie/Documents/R code/GORS RCT/matched.csv"
#########
#load clue package as is has an inbuilt hungarian algortihm solver
require(clue)
#load plyr package because the join functions are used
require(plyr)
moj_gors_list<-read.csv(read_path,header=TRUE)
participants <- subset(moj_gors_list,rct_opt_in==TRUE,select=c(name,unit,team,email))
#add a 'no match' line if there are an odd number of people in the list
if (nrow(participants) %% 2 != 0){
no_match_line <- data.frame(name="No match",unit=NA,team=NA,email=NA)
participants <- rbind(participants,no_match_line)
}
participants_names <- participants$name
###split the list of names in half (randomly) and assign one list to the rows and one to the columns
sample_size <- nrow(participants)/2
row_names <- sample(participants_names,sample_size,replace=FALSE,prob=NULL)
column_names <- participants_names[!(participants$name %in% row_names)]
#create a matrix of random values
matrix <- matrix(sample.int(sample_size^2,size = sample_size^2,replace = FALSE),
nrow = sample_size,
ncol = sample_size)
###set matrix row names and column names
colnames(matrix) <- column_names
rownames(matrix) <- row_names
###assign an arbitrarily large number to those that are in the same team
for(row_num in 1:sample_size){
selected_name_row <- rownames(matrix)[[row_num]]
selected_name_row_details <- subset(participants,name==selected_name_row)
selected_name_row_team <- selected_name_row_details$team
for(column_num in 1:sample_size){
selected_name_column <- colnames(matrix)[[column_num]]
selected_name_column_details <- subset(participants,name==selected_name_column)
selected_name_column_team <- selected_name_column_details$team
if(selected_name_row_team == selected_name_column_team){
matrix[row_num,column_num] <- 9999
}
}
}
###run the hungarian algorithm solver
opt_assignment <- solve_LSAP(matrix,maximum=FALSE)
#subset the details of people in the rows
person1_names <- data.frame(name=rownames(matrix))
person1_details <- join(person1_names,participants,by="name",type="inner")
#subset the details of the persons each row is matched to
person2_names<-data.frame(name=NA)
for(paired in 1:sample_size){
person2_names<- rbind(person2_names,colnames(matrix)[[opt_assignment[paired]]])
}
person2_details <- join(person2_names,participants,by="name",type="inner")
matched_pairs <- cbind(person1_details,person2_details)
write.csv(matched_pairs,write_path,row.names=FALSE)
write_path <- paste("C:/Users/Annie/Documents/R code/GORS RCT/pairings_",Sys.date,".csv",sep="")
#set write path
write_path <- paste("C:/Users/Annie/Documents/R code/GORS RCT/pairings_",Sys.Date,".csv",sep="")
#########
write_path <- paste("C:/Users/Annie/Documents/R code/GORS RCT/pairings_",Sys.Date(),".csv",sep="")
#########
write_path
#this code uses an adjustment to the hungarian algorithm to assign a person from one list
#to one person from another list. The 'values' are randomly assigned, but people who
#are in the same team are assigned an arbitrarily large number to ensure that they
#are not paired
###set write path and read path
#set read path for the full list of moj gors members
read_path <- "C:/Users/Annie/Documents/R code/GORS RCT/full_moj_gors_list.csv"
#set write path
write_path <- paste("C:/Users/Annie/Documents/R code/GORS RCT/pairings_",Sys.Date(),".csv",sep="")
#########
#load clue package as is has an inbuilt hungarian algortihm solver
require(clue)
#load plyr package because the join functions are used
require(plyr)
moj_gors_list<-read.csv(read_path,header=TRUE)
participants <- subset(moj_gors_list,rct_opt_in==TRUE,select=c(name,unit,team,email))
#add a 'no match' line if there are an odd number of people in the list
if (nrow(participants) %% 2 != 0){
no_match_line <- data.frame(name="No match",unit=NA,team=NA,email=NA)
participants <- rbind(participants,no_match_line)
}
participants_names <- participants$name
###split the list of names in half (randomly) and assign one list to the rows and one to the columns
sample_size <- nrow(participants)/2
row_names <- sample(participants_names,sample_size,replace=FALSE,prob=NULL)
column_names <- participants_names[!(participants$name %in% row_names)]
#create a matrix of random values
matrix <- matrix(sample.int(sample_size^2,size = sample_size^2,replace = FALSE),
nrow = sample_size,
ncol = sample_size)
###set matrix row names and column names
colnames(matrix) <- column_names
rownames(matrix) <- row_names
###assign an arbitrarily large number to those that are in the same team
for(row_num in 1:sample_size){
selected_name_row <- rownames(matrix)[[row_num]]
selected_name_row_details <- subset(participants,name==selected_name_row)
selected_name_row_team <- selected_name_row_details$team
for(column_num in 1:sample_size){
selected_name_column <- colnames(matrix)[[column_num]]
selected_name_column_details <- subset(participants,name==selected_name_column)
selected_name_column_team <- selected_name_column_details$team
if(selected_name_row_team == selected_name_column_team){
matrix[row_num,column_num] <- 9999
}
}
}
###run the hungarian algorithm solver
opt_assignment <- solve_LSAP(matrix,maximum=FALSE)
#subset the details of people in the rows
person1_names <- data.frame(name=rownames(matrix))
person1_details <- join(person1_names,participants,by="name",type="inner")
#subset the details of the persons each row is matched to
person2_names<-data.frame(name=NA)
for(paired in 1:sample_size){
person2_names<- rbind(person2_names,colnames(matrix)[[opt_assignment[paired]]])
}
person2_details <- join(person2_names,participants,by="name",type="inner")
matched_pairs <- cbind(person1_details,person2_details)
write.csv(matched_pairs,write_path,row.names=FALSE)
install.packages("ggplot2")
#install the packages
library(ggplot2)
library(rgdal)
library(rgeos)
library(maptools)
library(ggmap)
library(plyr)
"GeoJSON" %in% ogrDrivers()$name
ogrDrivers())$name
ogrDrivers()$name
#install the packages
library(rgdal)
library(mapproj)
library(raster)
library(rgeos)
library(ggplot2)
library(plyr)
if (!require(gpclib)) install.packages("gpclib", type="source")
gpclibPermit()
setwd("C:/Users/Annie/Documents/Work/Maps/cpa_maps/inputs")
#read in laa to cpa mapping
laa_cpa_mapping <- read.csv("laa_cpa.csv", header = TRUE)
#read in LAA polygons
laa_polygons <- readOGR("ctyua_ew_generalised_WGS84.json", "OGRGeoJSON")
#merge by laa to add cpa column to polygon data
laa_polygons_with_cpa_data <- merge(laa_polygons, laa_cpa_mapping,
by.x = "CTYUA13NM", by.y = "LAA",
all.x = TRUE, all.y = TRUE)
# aggregate laa polygons by the 21 cpas (aggregate by cpa_code)
cpa_polygons <- raster::aggregate(laa_polygons_with_cpa_data, "cpa_code")
#fortify and merge to create the data frame ggplot will show on the map
cpa_polygons@data$id <- rownames(cpa_polygons@data)
cpa_polygons.points <- fortify(cpa_polygons, region = "id")
cpa_polygons.df <- merge(cpa_polygons.points, cpa_polygons@data, sort=FALSE)
# merge to add rates
rates <- read.csv("cpa_rates.csv", header = TRUE)
cpa_polygons.df <- merge(cpa_polygons.df, rates,
by.x = "cpa_code", by.y = "cpa_code",
all.x = TRUE, all.y = TRUE)
library(dplyr)
library(ggvis)
# this is for the tooltip. it does a lookup into the data frame
# and then uses those values for the popup
all_values <- function(x) {
if(is.null(x)) return(NULL)
row <- cpa_polygons.df[cpa_polygons.df$id==x$id,c("CPA","rate1","rate2")]
unique_row <- unique(row)
paste0(names(unique_row), ": ", format(unique_row), collapse = "<br />")
}
cpa_polygons.df %>%
group_by(group, id) %>%
ggvis(~long, ~lat) %>%
layer_paths(strokeWidth := 0.5, stroke := "white", fill = ~rate1) %>%
scale_numeric("fill", range = c("lightblue","darkblue")) %>%
hide_axis("x") %>% hide_axis("y") %>%
#add_legend(title = "Rate 1 (%)") %>% # for some reason this gives an error!
add_tooltip(all_values, "hover")
